===========================================================
          🚀  Ultimate MongoDB + Docker Guide (2025)
===========================================================

1️⃣  Create a Custom Docker Network
-----------------------------------------------------------
🔧 Use this to connect containers together:
    docker network create mongo-network


2️⃣  Run MongoDB Container
-----------------------------------------------------------
🐳 Launch MongoDB with environment variables:
    docker run -d -p 27017:27017 \
      --name mongo \
      --network mongo-network \
      -e MONGO_INITDB_ROOT_USERNAME=admin \
      -e MONGO_INITDB_ROOT_PASSWORD=qwerty \
      mongo


3️⃣  Run Mongo Express (Web UI)
-----------------------------------------------------------
🌐 Mongo Express to interact with your DB via browser:
    docker run -d -p 8081:8081 \
      --name mongo-express \
      --network mongo-network \
      -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
      -e ME_CONFIG_MONGODB_ADMINPASSWORD=qwerty \
      -e ME_CONFIG_MONGODB_URL="mongodb://admin:qwerty@mongo:27017" \
      mongo-express


🔐 Mongo Express Login Credentials
-----------------------------------------------------------
    ➤ Username: admin  
    ➤ Password: pass


===========================================================
          📡 Docker Compose Networking Insights
===========================================================

✔ Docker Compose auto-creates a **default network**:
   📦 Format: `<project-folder-name>_default`
   🌐 All services in the YAML file are **auto-connected**.

🔍 To inspect a Docker network:
    docker network inspect <network_name>

💡 Example:
    docker network inspect learndockercompose_default

🛠 Essential Compose Commands:
-----------------------------------------------------------
▶ Start containers:
    docker compose -f <fileName>.yaml up -d

■ Stop & clean up containers, networks, etc:
    docker compose -f <fileName>.yaml down


===========================================================
            🧱 Docker Image Concept Recap
===========================================================

       +--------------------+
       |     Base Image     |
       |   (e.g., node)     |
       +--------------------+
                 ↓
       +--------------------+
       |   Custom Image     |
       |  (Your App Code)   |
       +--------------------+

🧠 You start with a base image (like `node`, `python`, `mongo`)  
🔧 Then add your code and dependencies  
📦 Result: a **custom Docker image** ready to deploy.


===========================================================
          ⚙️ Essential Dockerfile Instructions
===========================================================

| Instruction | Purpose                                                  |
|-------------|----------------------------------------------------------|
| FROM        | Sets the base image (e.g., node:alpine)                  |
| WORKDIR     | Sets the working directory in container                  |
| COPY . .    | Copies files from host to container (can repeat)         |
| RUN         | Executes shell commands while building the image         |
| ENV         | Defines environment variables                            |
| EXPOSE      | Documents the port the container will use                |
| CMD         | The command to run when container starts (only once)     |

🔥 Pro Tip:  
Use `RUN` for install/setup commands  
Use `CMD` for starting the final app inside the container


===========================================================
          🛠 Useful Docker Commands Recap
===========================================================

📦 Build image with a tag:
    docker build -t testapp:1.0 .

▶ Run a container from image:
    docker run testapp:1.0

💻 Enter interactive container shell:
    docker run -it testapp:1.0 bash
    → Useful commands inside:
        - ls
        - cd /app (or whatever your workdir is)


===========================================================
          💾 Volumes: Persistent Data Storage
===========================================================

📂 Mounting host folder into container (CLI style):
    docker run -it -v C:\Users\HP\Desktop\data:/test/data ubuntu

📂 Volume mount in docker-compose.yml:
    volumes:
      - /c/Users/HP/Desktop/data:/data/db

🧭 Path Handling Differences:

| Tool             | Path Style Needed                                     |
|------------------|--------------------------------------------------------|
| `docker run`     | Windows-style OK → `C:\Users\...`                      |
| `docker-compose` | Requires Linux-style → `/c/Users/...`                 |


🔄 Volume Lifecycle:
-----------------------------------------------------------
🆕 Create:
    docker volume create my-volume

📋 List:
    docker volume ls

❌ Delete:
    docker volume rm my-volume

