=========================================
        üöÄ MongoDB with Docker Setup
=========================================

1. üõ† Create a Custom Network
-----------------------------
docker network create mongo-network


2. üê≥ Run MongoDB Container
-----------------------------
docker run -d -p 27017:27017 --name mongo --network mongo-network -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=qwerty mongo


3. üåê Run Mongo Express (Web UI)
---------------------------------
docker run -d -p 8081:8081 --name mongo-express --network mongo-network -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=qwerty -e ME_CONFIG_MONGODB_URL="mongodb://admin:qwerty@mongo:27017" mongo-express


üîê Mongo Express Login
------------------------
Username: admin  
Password: pass


=========================================
   üß† Docker Compose Networking Notes
=========================================

‚úî Docker Compose automatically creates a default network:
   ‚û§ Format: `<project-folder-name>_default`  
   ‚û§ All services in the Compose file are auto-connected to this.

‚úî Inspect Docker networks:
   docker network inspect <network_name>

Example:
   docker network inspect learndockercompose_default


‚úî Essential Compose Commands:
------------------------------
Start services:
   docker compose -f <fileName>.yaml up -d

Stop and clean up:
   docker compose -f <fileName>.yaml down


=========================================
     üß± Docker Image Concept Recap
=========================================

      +---------------+
      |   Base Image  |
      |  (e.g., Node) |
      +---------------+
             ‚Üì
      +-------------------+
      |   Custom Image    |
      |  (Your App Code)  |
      +-------------------+

üí° You begin with a base image (e.g., `node`, `python`, `mongo`),  
then add your source code and dependencies to build a **custom image**  
tailored to your application.


=========================================
     üìÑ Essential Dockerfile Commands
=========================================

FROM       ‚Üí Defines the base image (e.g., `node:alpine`, `python:3.12`)  
WORKDIR    ‚Üí Sets the working directory inside the container  
COPY . .   ‚Üí Copies files from host into the container (can be multiple)  
RUN        ‚Üí Executes shell commands during build (can be multiple)  
ENV        ‚Üí Sets environment variables  
EXPOSE     ‚Üí Documents which ports will be used  
CMD        ‚Üí Sets the default command to run (only one allowed)  

üî• Pro Tip:  
Use `RUN` for installation/configuration during image build.  
Use `CMD` to start the app when the container runs.


docker build -t testapp:1.0 . { -t => tag } { dont know what this . do :D }

docker run testapp:1.0

docker run -it testapp:1.0 bash
ls
cd testapp


-v absolute path : container path

docker run -it -v C:\Users\HP\Desktop\data:/test/data ubuntu  { : after this, is for linux so writing path way got different } [ host_dir:cont_dir ]

 volumes:
   - /c/Users/HP/Desktop/data:/data/db

| Tool             | Path Handling                                                             |
| ---------------- | ------------------------------------------------------------------------- |
| `docker run`     | CLI level hota hai, Windows-style paths (`C:\Users\...`) accept karta hai |
| `docker-compose` | YAML-based file hai, jo Linux-style path chahta hai (`/c/Users/...`)      |



docker volume create my-volume
docker volume ls
docker volume rm my-volume
